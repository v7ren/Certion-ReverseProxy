Below is a repository map. 
For each file in the codebase, this map contains the name of the file, and the signature for any classes, methods, or functions in the file.

app.py:
	http_handler_wrapper (request: web.Request) 
	...
	status_handler (req) 
	...
	tunnel_control_wrapper (request: web.Request) 
	...
	unified_handler (request: web.Request) 
	...
	agent_complete_command (command_id) 
	...
	agent_get_commands () 
	...
	agent_heartbeat () 
	...
	agent_update_status (project_id) 
	...
	check_auth () 
	...
	create_agent () 
	...
	create_project () 
	...
	create_unified_app () 
	...
	dashboard () 
	...
	delete_agent (agent_id) 
	...
	delete_project (project_id) 
	...
	download_client () 
	...
	get_project (project_id) 
	...
	get_project_status (project_id) 
	...
	index () 
	...
	list_agents () 
	...
	list_projects () 
	...
	load_user (user_id) 
	...
	restart_project (project_id) 
	...
	serve_assets (path) 
	...
	serve_default_files (path) 
	...
	serve_react_router (path) 
	...
	serve_static_files (path) 
	...
	start_project (project_id) 
	...
	stop_project (project_id) 
	...
	toggle_project_public (project_id) 
	...
	update_project (project_id) 
	...
	verify_agent_api_key (api_key: str) 
	...
	http_handler_wrapper (request: web.Request) 
	...
	tunnel_control_wrapper (request: web.Request) 
	...
	unified_handler (request: web.Request) 
	...
	agent_complete_command (command_id) 
	...
	agent_get_commands () 
	...
	agent_heartbeat () 
	...
	agent_update_status (project_id) 
	...
	check_auth () 
	...
	create_agent () 
	...
	create_project () 
	...
	create_unified_app () 
	...
	dashboard () 
	...
	delete_agent (agent_id) 
	...
	delete_project (project_id) 
	...
	download_client () 
	...
	get_project (project_id) 
	...
	get_project_status (project_id) 
	...
	index () 
	...
	list_agents () 
	...
	list_projects () 
	...
	load_user (user_id) 
	...
	restart_project (project_id) 
	...
	serve_assets (path) 
	...
	serve_default_files (path) 
	...
	serve_react_router (path) 
	...
	serve_static_files (path) 
	...
	start_project (project_id) 
	...
	stop_project (project_id) 
	...
	toggle_project_public (project_id) 
	...
	update_project (project_id) 
	...
	verify_agent_api_key (api_key: str) 
	...
	http_handler_wrapper (request: web.Request) 
	...
	status_handler (req) 
	...
	tunnel_control_wrapper (request: web.Request) 
	...
	unified_handler (request: web.Request) 
	...
	agent_complete_command (command_id) 
	...
	agent_get_commands () 
	...
	agent_heartbeat () 
	...
	agent_update_status (project_id) 
	...
	check_auth () 
	...
	create_agent () 
	...
	create_project () 
	...
	create_unified_app () 
	...
	dashboard () 
	...
	delete_agent (agent_id) 
	...
	delete_project (project_id) 
	...
	download_client () 
	...
	get_project (project_id) 
	...
	get_project_status (project_id) 
	...
	index () 
	...
	list_agents () 
	...
	list_projects () 
	...
	load_user (user_id) 
	...
	restart_project (project_id) 
	...
	serve_assets (path) 
	...
	serve_default_files (path) 
	...
	serve_react_router (path) 
	...
	serve_static_files (path) 
	...
	start_project (project_id) 
	...
	stop_project (project_id) 
	...
	toggle_project_public (project_id) 
	...
	update_project (project_id) 
	...
	verify_agent_api_key (api_key: str) 
	...
	http_handler_wrapper (request: web.Request) 
	...
	status_handler (req) 
	...
	tunnel_control_wrapper (request: web.Request) 
	...
	unified_handler (request: web.Request) 
	...
	agent_complete_command (command_id) 

app.py:
	agent_get_commands () 
	...
	agent_heartbeat () 
	...
	agent_update_status (project_id) 
	...
	check_auth () 
	...
	create_agent () 
	...
	create_project () 
	...
	create_unified_app () 
	...
	dashboard () 
	...
	delete_agent (agent_id) 
	...
	delete_project (project_id) 
	...
	download_client () 
	...
	get_project (project_id) 
	...
	get_project_status (project_id) 
	...
	index () 
	...
	list_agents () 
	...
	list_projects () 
	...
	load_user (user_id) 
	...
	restart_project (project_id) 
	...
	serve_assets (path) 
	...
	serve_default_files (path) 
	...
	serve_react_router (path) 
	...
	serve_static_files (path) 
	...
	start_project (project_id) 
	...
	stop_project (project_id) 
	...
	toggle_project_public (project_id) 
	...
	update_project (project_id) 
	...
	verify_agent_api_key (api_key: str) 
	...
	http_handler_wrapper (request: web.Request) 
	...
	status_handler (req) 
	...
	tunnel_control_wrapper (request: web.Request) 
	...
	unified_handler (request: web.Request) 
	...
	agent_complete_command (command_id) 
	...
	agent_get_commands () 
	...
	agent_heartbeat () 
	...
	agent_update_status (project_id) 
	...
	check_auth () 
	...
	create_agent () 
	...
	create_project () 
	...
	create_unified_app () 
	...
	dashboard () 
	...
	delete_agent (agent_id) 
	...
	delete_project (project_id) 
	...
	download_client () 
	...
	get_project (project_id) 
	...
	get_project_status (project_id) 
	...
	index () 
	...
	list_agents () 
	...
	list_projects () 
	...
	load_user (user_id) 
	...
	restart_project (project_id) 
	...
	serve_assets (path) 
	...
	serve_default_files (path) 
	...
	serve_react_router (path) 
	...
	serve_static_files (path) 
	...
	start_project (project_id) 
	...
	stop_project (project_id) 
	...
	toggle_project_public (project_id) 
	...
	update_project (project_id) 
	...
	verify_agent_api_key (api_key: str) 
	...
	http_handler_wrapper (request: web.Request) 
	...
	status_handler (req) 
	...
	tunnel_control_wrapper (request: web.Request) 
	...
	unified_handler (request: web.Request) 
	...
	agent_complete_command (command_id) 
	...
	agent_get_commands () 
	...
	agent_heartbeat () 
	...
	agent_update_status (project_id) 
	...
	check_auth () 
	...
	create_agent () 
	...
	create_project () 
	...
	create_unified_app () 
	...
	dashboard () 
	...
	delete_agent (agent_id) 
	...
	delete_project (project_id) 
	...
	download_client () 
	...
	get_project (project_id) 
	...
	get_project_status (project_id) 
	...
	index () 
	...
	list_agents () 
	...
	list_projects () 
	...
	load_user (user_id) 
	...
	restart_project (project_id) 
	...
	serve_assets (path) 
	...
	serve_default_files (path) 
	...
	serve_react_router (path) 
	...
	serve_static_files (path) 
	...
	start_project (project_id) 
	...
	stop_project (project_id) 
	...
	toggle_project_public (project_id) 
	...
	update_project (project_id) 
	...
	verify_agent_api_key (api_key: str) 
	...
	http_handler_wrapper (request: web.Request) 
	...
	status_handler (req) 
	...
	tunnel_control_wrapper (request: web.Request) 
	...
	unified_handler (request: web.Request) 
	...
	agent_complete_command (command_id) 
	...
	agent_get_commands () 
	...
	agent_heartbeat () 
	...
	agent_update_status (project_id) 
	...
	check_auth () 

app.py:
	create_agent () 
	...
	create_project () 
	...
	create_unified_app () 
	...
	dashboard () 
	...
	delete_agent (agent_id) 
	...
	delete_project (project_id) 
	...
	download_client () 
	...
	get_project (project_id) 
	...
	get_project_status (project_id) 
	...
	index () 
	...
	list_agents () 
	...
	list_projects () 
	...
	load_user (user_id) 
	...
	restart_project (project_id) 
	...
	serve_assets (path) 
	...
	serve_default_files (path) 
	...
	serve_react_router (path) 
	...
	serve_static_files (path) 
	...
	start_project (project_id) 
	...
	stop_project (project_id) 
	...
	toggle_project_public (project_id) 
	...
	update_project (project_id) 
	...
	verify_agent_api_key (api_key: str) 

auth.py:
	allowed_file (filename) 
	...
	change_password () 
	...
	check_email_availability () 
	...
	check_username_availability () 
	...
	delete_avatar () 
	...
	get_current_user () 
	...
	is_rate_limited (identifier, max_attempts=5, window_minutes=15) 
	...
	login () 
	...
	login_page () 
	...
	logout () 
	...
	register () 
	...
	register_page () 
	...
	resize_and_save_avatar (file, user_id) 
	...
	update_profile () 
	...
	upload_avatar () 
	...
	validate_email (email) 
	...
	validate_password (password) 
	...
	validate_username (username) 

autogitpush.py:
	CompleteGitSetup 
	...
	GitHubAPI 
	...
	GitSetupMainWindow 
	...
	GitSetupWorker 
	...
	ModernButton 
	...
	ModernLineEdit 
	...
	__init__ (self) 
	...
	__init__ (self, git_setup) 
	...
	__init__ (self, placeholder="") 
	...
	__init__ (self, project_path, repo_name=None, repo_url=None, github_token=None, 
	                 commit_message=None, branch="main", private=False, description="") 
	...
	__init__ (self, text, primary=False) 
	...
	__init__ (self, token=None) 
	...
	_get_system_encoding (self) 
	...
	_make_request (self, url, method="GET", data=None) 
	...
	apply_modern_theme (self) 
	...
	browse_folder (self) 
	...
	check_repository_exists (self, username, repo_name) 
	...
	clear_form (self) 
	...
	clear_output (self) 
	...
	complete_setup (self) 
	...
	create_action_buttons (self) 
	...
	create_content_tabs (self, layout) 
	...
	create_folder_section (self) 
	...
	create_git_section (self) 
	...
	create_header (self, layout) 
	...
	create_help_tab (self) 
	...
	create_output_tab (self) 
	...
	create_repository (self, name, description="", private=False) 
	...
	create_repository_section (self) 
	...
	create_setup_tab (self) 
	...
	get_user (self) 
	...
	log_message (self, message) 
	...
	main () 
	...
	on_folder_changed (self) 
	...
	on_setup_finished (self, success, results) 
	...
	run (self) 
	...
	run_command (self, command, cwd=None) 
	...
	save_log (self) 
	...
	set_token (self, token) 
	...
	setup_connections (self) 
	...
	setup_style (self) 
	...
	setup_style (self) 
	...
	setup_ui (self) 
	...
	show_token_help (self) 
	...
	start_setup (self) 
	...
	toggle_repo_mode (self) 
	...
	validate_settings (self) 

client.py:
	_forward_request (self, request_data, ws, session) 
	...
	_handle_requests (self, ws, session) 
	...
	_run_tunnel (self) 
	...
	_send_error_response (self, ws, request_id: str, status: int, message: str) 
	...
	ProjectAgent 
	...
	WebSocketTunnelThread 
	...
	__init__ (self, server_url, api_key, debug_cookies=False) 
	...
	__init__ (self, server_url, api_key, project_id, local_port) 
	...
	execute_command (self, command) 
	...
	get_system_info (self) 
	...
	main () 
	...
	poll_commands (self) 

client.py:
	report_completion (self, command_id, success, message, pid) 
	...
	run (self) 
	...
	run (self) 
	...
	send_heartbeat (self) 
	...
	start_project (self, project) 
	...
	start_tunnel_thread (self, project_id, local_port) 
	...
	stop (self) 
	...
	stop_project (self, project_id) 
	...
	stop_tunnel (self, project_id) 
	...
	stream_logs (self, project_id, process) 

client2.py:
	_forward_request (self, request_data, ws, session) 
	...
	_handle_requests (self, ws, session) 
	...
	_run_tunnel (self) 
	...
	_send_error_response (self, ws, request_id: str, status: int, message: str) 
	...
	ProjectAgent 
	...
	WebSocketTunnelThread 
	...
	__init__ (self, server_url, api_key, debug_cookies=False) 
	...
	__init__ (self, server_url, api_key, project_id, local_port, agent=None) 
	...
	execute_command (self, command) 
	...
	get_system_info (self) 
	...
	main () 
	...
	report_completion (self, command_id, success, message, pid) 
	...
	run (self) 
	...
	run (self) 
	...
	send_heartbeat (self) 
	...
	start_project (self, project) 
	...
	start_tunnel_thread (self, project_id, local_port) 
	...
	stop (self) 
	...
	stop_project (self, project_id) 
	...
	stop_tunnel (self, project_id) 
	...
	stream_logs (self, project_id, process) 

debug.py:
	check_routes () 

firewall.py:
	_get_project_rules_from_db (db: Session, project_id: int, firewall_rule_model) 
	...
	clear_cache (project_id: Optional[int] = None) 
	...
	get_project_firewall_rules (db: Session, project_id: int, firewall_rule_model, force_reload=False) 
	...
	is_request_blocked (db: Session, project_id: int, firewall_rule_model, method: str, path: str) 
	...
	_get_project_rules_from_db (db: Session, project_id: int, firewall_rule_model) 
	...
	get_project_firewall_rules (db: Session, project_id: int, firewall_rule_model, force_reload=False) 
	...
	is_request_blocked (db: Session, project_id: int, firewall_rule_model, method: str, path: str) 

firewall_aiohttp.py:
	_get_project_rules_from_db (project_id: int, firewall_rule_model) 
	...
	clear_cache (project_id: Optional[int] = None) 
	...
	get_db () 
	...
	get_project_firewall_rules (project_id: int, firewall_rule_model, force_reload=False) 
	...
	is_request_blocked (project_id: int, firewall_rule_model, method: str, path: str) 
	...
	_get_project_rules_from_db (project_id: int, firewall_rule_model) 
	...
	clear_cache (project_id: Optional[int] = None) 
	...
	get_db () 
	...
	get_project_firewall_rules (project_id: int, firewall_rule_model, force_reload=False) 
	...
	is_request_blocked (project_id: int, firewall_rule_model, method: str, path: str) 
	...
	create_firewall_rule (project_id) 
	...
	delete_firewall_rule (project_id, rule_id) 
	...
	export_firewall_rules (project_id) 
	...
	get_firewall_rules (project_id) 
	...
	import_firewall_rules (project_id) 
	...
	verify_project_access (project_id) 
	...
	_get_project_rules_from_db (project_id: int, firewall_rule_model) 
	...
	get_db () 
	...
	get_project_firewall_rules (project_id: int, firewall_rule_model, force_reload=False) 
	...
	is_request_blocked (project_id: int, firewall_rule_model, method: str, path: str) 
	...
	create_firewall_rule (project_id) 
	...
	delete_firewall_rule (project_id, rule_id) 
	...
	export_firewall_rules (project_id) 
	...
	get_firewall_rules (project_id) 
	...
	import_firewall_rules (project_id) 
	...
	verify_project_access (project_id) 

firewall_cache.py:
	clear_cache (project_id: Optional[int] = None) 
	...
	get_cached_rules (project_id: int, force_reload: bool = False) 
	...
	set_cached_rules (project_id: int, rules: List[dict]) 

gallery.py:
	api_bulk_delete_photos () 
	...
	api_delete_photo (photo_id) 
	...
	api_gallery_photos () 
	...
	api_gallery_stats () 
	...
	api_get_photo (photo_id) 
	...
	api_upload_photo () 

modal.py:
	FirewallRule 

models.py:
	Agent 
	...
	Command 
	...
	Photo 
	...
	Project 
	...
	ProjectLog 
	...
	Repo 
	...
	RepoCommit 
	...
	RepoFile 
	...
	RepoFork 
	...
	RepoIssue 
	...
	RepoStar 
	...
	User 
	...
	__repr__ (self) 
	...
	avatar_url (self) 
	...
	check_password (self, password) 
	...
	full_name (self) 
	...
	full_url (self) 
	...
	get_avatar_path (self) 
	...
	is_forked_by (self, user) 
	...
	is_starred_by (self, user) 
	...
	set_password (self, password) 
	...
	thumb_url (self) 
	...
	to_dict (self) 
	...
	to_dict (self) 
	...
	to_dict (self) 

models.py:
	to_dict (self) 
	...
	to_dict (self) 

projects.py:
	agent_heartbeat () 
	...
	complete_command (command_id) 
	...
	create_agent () 
	...
	create_project () 
	...
	debug_project (project_id) 
	...
	debug_register_tunnel (project_id) 
	...
	delete_agent (agent_id) 
	...
	delete_project (project_id) 
	...
	find_available_tunnel_port () 
	...
	get_agent_commands () 
	...
	get_agent_info () 
	...
	get_agents () 
	...
	get_project (project_id) 
	...
	get_project_logs (project_id) 
	...
	get_project_status (project_id) 
	...
	get_projects () 
	...
	make_project_public (project_id) 
	...
	push_logs () 
	...
	restart_project (project_id) 
	...
	start_project (project_id) 
	...
	stop_project (project_id) 
	...
	toggle_project_public (project_id) 
	...
	update_project (project_id) 
	...
	verify_agent_api_key () 
	...
	agent_heartbeat () 
	...
	complete_command (command_id) 
	...
	create_agent () 
	...
	create_project () 
	...
	debug_project (project_id) 
	...
	debug_register_tunnel (project_id) 
	...
	delete_agent (agent_id) 
	...
	delete_project (project_id) 
	...
	find_available_tunnel_port () 
	...
	get_agent_commands () 
	...
	get_agent_info () 
	...
	get_agents () 
	...
	get_project (project_id) 
	...
	get_project_logs (project_id) 
	...
	get_project_status (project_id) 
	...
	get_projects () 
	...
	make_project_public (project_id) 
	...
	push_logs () 
	...
	restart_project (project_id) 
	...
	start_project (project_id) 
	...
	stop_project (project_id) 
	...
	toggle_project_public (project_id) 
	...
	update_project (project_id) 
	...
	verify_agent_api_key () 
	...
	agent_heartbeat () 
	...
	complete_command (command_id) 
	...
	create_agent () 
	...
	create_project () 
	...
	debug_project (project_id) 
	...
	debug_register_tunnel (project_id) 
	...
	delete_agent (agent_id) 
	...
	delete_project (project_id) 
	...
	find_available_tunnel_port () 
	...
	get_agent_commands () 
	...
	get_agent_info () 
	...
	get_agents () 
	...
	get_project (project_id) 
	...
	get_project_logs (project_id) 
	...
	get_project_status (project_id) 
	...
	get_projects () 
	...
	make_project_public (project_id) 
	...
	push_logs () 
	...
	restart_project (project_id) 
	...
	start_project (project_id) 
	...
	stop_project (project_id) 
	...
	toggle_project_public (project_id) 
	...
	update_project (project_id) 
	...
	verify_agent_api_key () 

repo.py:
	allowed_file (filename) 
	...
	create_repository () 
	...
	download_file (username, repo_name, file_path) 
	...
	fork_repository (repo_id) 
	...
	get_repo_files (repo_id) 
	...
	get_repo_path (repo) 
	...
	get_repositories () 
	...
	serialize_repo (repo, user=None) 
	...
	serve_raw_file (username, repo_name, file_path) 
	...
	star_repository (repo_id) 
	...
	unstar_repository (repo_id) 
	...
	upload_files (repo_id) 

servertest.py:
	http_handler_wrapper (request: web.Request) 
	...
	push_command_to_agent (request) 
	...
	status_handler (req) 
	...
	tunnel_control_wrapper (request: web.Request) 
	...
	unified_handler (request: web.Request) 
	...
	agent_complete_command (command_id) 
	...
	agent_get_commands () 
	...
	agent_heartbeat () 
	...
	agent_update_status (project_id) 
	...
	check_auth () 
	...
	create_agent () 
	...
	create_project () 
	...
	create_unified_app () 
	...
	dashboard () 

servertest.py:
	delete_agent (agent_id) 
	...
	delete_project (project_id) 
	...
	download_client () 
	...
	get_project (project_id) 
	...
	get_project_status (project_id) 
	...
	index () 
	...
	list_agents () 
	...
	list_projects () 
	...
	load_user (user_id) 
	...
	restart_project (project_id) 
	...
	serve_assets (path) 
	...
	serve_default_files (path) 
	...
	serve_react_router (path) 
	...
	serve_static_files (path) 
	...
	start_project (project_id) 
	...
	stop_project (project_id) 
	...
	toggle_project_public (project_id) 
	...
	update_project (project_id) 
	...
	verify_agent_api_key (api_key: str) 

subdomainv2.py:
	extract_subdomain (host: str, domain: str) 
	...
	generate_subdomain (project_name: str, username: str, db: Session, project_model) 
	...
	normalize_subdomain (subdomain: str) 
	...
	validate_subdomain_name (name: str) 

tunnels.py:
	cleanup_old_requests () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session, 
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	dumps (o) 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	cleanup_old_requests () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session, 
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	dumps (o) 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 

tunnels_with_firewall.py:
	cleanup_old_requests () 
	...
	http_handler_wrapper (request: web.Request) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session, 
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	dumps (o) 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 

tunnels_with_firewall.py:
	cleanup_old_requests () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session, 
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	dumps (o) 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 

tunnels_with_firewall.py:
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_old_requests () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session, 
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	dumps (o) 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 
	...
	cleanup_task () 
	...
	http_handler (request: web.Request, domain: str, db_session: scoped_session, 
	                      project_model, status_handler_func, firewall_rule_model=None) 
	...
	tunnel_control (request: web.Request, verify_api_key_func, db_session: scoped_session,
	                        project_model, agent_model, domain: str) 
	...
	check_rate_limit (ip: str) 
	...
	cleanup_old_requests () 
	...
	dumps (o) 
	...
	get_project_by_subdomain (subdomain: str) 
	...
	get_tunnel_by_subdomain (subdomain: str) 
	...
	get_tunnel_stats () 
	...
	loads (b) 
	...
	normalize_incoming_headers (hdrs: aiohttp.typedefs.LooseHeaders) 
	...
	set_request_timeout (timeout: float) 
	...
	start_cleanup_task () 

utils_images.py:
	_auto_orient (img: Image.Image) 
	...
	allowed_image (filename: str) 
	...
	random_name (ext: str) 
	...
	save_user_image (file_storage, user_id: int) 
	...
	user_upload_dir (user_id: int) 

utils_repos.py:
	format_file_size (size_bytes: int) 
	...
	get_file_type (filename: str) 
	...
	repo_disk_path (username: str, repo_name: str) 
	...
	safe_subpath (base_path: str, subpath: str) 

eslint.config.js
firewall_api.py
firewall_models.py
index.html
key.dev
package.json
postcss.config.js
ssl.dev.ren
subdomain_handling.py
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
templates\index.html
src\App.css
src\App.tsx
src\index.css
src\main.tsx
src\pages\agents.tsx
src\pages\dashboard-overview.tsx
src\pages\dashboard.tsx
src\pages\dashboard2.tsx
src\pages\firewall-manager.tsx
src\pages\header.tsx
src\pages\index.tsx
src\pages\login.tsx
src\pages\nav.tsx
src\pages\profile.tsx
src\pages\projects.tsx
src\pages\projectsoriginal.tsx
src\pages\repo-view.tsx
src\pages\repo.tsx
src\pages\repository.tsx
repos\3\test\README.md
repos\2\test repo\README.md
repos\1\test\README.md
repos\1\repo1\README.md
public\anurati.css
public\fonts\Anurati-Regular.otf
certs\cloudflare_cert.pem
certs\cloudflare_key.pem